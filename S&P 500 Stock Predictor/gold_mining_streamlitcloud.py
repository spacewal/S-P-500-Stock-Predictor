# -*- coding: utf-8 -*-
"""gold_mining_streamLitCloud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NTkM7Dfro7pX-kTdz5qOp9KPzcyW8GGF
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
from keras.callbacks import EarlyStopping, ModelCheckpoint
import streamlit as st
from datetime import timedelta

@st.cache
def fetch_data(ticker, start_date, end_date):
    return yf.download(ticker, start=start_date, end=end_date)

@st.cache(allow_output_mutation=True)
def train_model(X_train, y_train):
    model = Sequential([
        LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
        LSTM(units=50),
        Dense(1)
    ])
    model.compile(optimizer='adam', loss='mean_squared_error')
    model.fit(X_train, y_train, epochs=50, batch_size=32, validation_split=0.1,
              callbacks=[EarlyStopping(monitor='val_loss', patience=5),
                         ModelCheckpoint('best_model.h5', save_best_only=True)])
    return model

def analyze_stock(ticker):
    data = fetch_data(ticker, '2020-01-01', '2024-01-01')
    data.dropna(inplace=True)

    scaler = MinMaxScaler(feature_range=(0, 1))
    data_scaled = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

    X, y = [], []
    for i in range(60, len(data_scaled)):
        X.append(data_scaled[i-60:i, 0])
        y.append(data_scaled[i, 0])

    X_train, y_train = np.array(X[:int(len(X) * 0.8)]), np.array(y[:int(len(y) * 0.8)])
    X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

    model = train_model(X_train, y_train)

    latest_scaled = scaler.transform(data['Close'].values[-60:].reshape(-1, 1))
    latest_scaled = np.reshape(latest_scaled, (1, latest_scaled.shape[0], 1))

    predicted = model.predict(latest_scaled)
    predicted_prices = scaler.inverse_transform(predicted)

    st.subheader("Predicted vs Actual Prices")
    plt.figure(figsize=(10, 5))
    plt.plot(data['Close'].tail(60), color='blue', label='Actual Prices')
    plt.plot(pd.date_range(start=data.index[-1], periods=len(predicted), freq='B'), predicted_prices, color='red', label='Predicted Prices')
    plt.title(f'{ticker} Stock Price Prediction')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    plt.grid(True)
    st.pyplot(plt)

def main():
    st.title("S&P 500 Stock Predictor")
    ticker = st.text_input("Enter a ticker from the S&P 500 to analyze:").upper()

    if ticker:
        analyze_stock(ticker)

if __name__ == "__main__":
    main()